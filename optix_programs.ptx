//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-34841621
// Cuda compilation tools, release 12.6, V12.6.77
// Based on NVVM 7.0.1
//

.version 8.5
.target sm_70
.address_size 64

	// .globl	__raygen__rg
.const .align 8 .b8 params[72];

.visible .entry __raygen__rg()
{
	.local .align 4 .b8 	__local_depot0[12];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .f32 	%f<57>;
	.reg .b32 	%r<80>;
	.reg .b64 	%rd<9>;


	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	add.u64 	%rd2, %SP, 0;
	add.u64 	%rd3, %SPL, 0;
	// begin inline asm
	call (%r1), _optix_get_launch_index_x, ();
	// end inline asm
	// begin inline asm
	call (%r2), _optix_get_launch_index_y, ();
	// end inline asm
	// begin inline asm
	call (%r4), _optix_get_launch_dimension_x, ();
	// end inline asm
	// begin inline asm
	call (%r5), _optix_get_launch_dimension_y, ();
	// end inline asm
	cvt.rn.f32.u32 	%f10, %r1;
	add.f32 	%f11, %f10, 0f3F000000;
	cvt.rn.f32.u32 	%f12, %r4;
	div.rn.f32 	%f13, %f11, %f12;
	cvt.rn.f32.u32 	%f14, %r2;
	add.f32 	%f15, %f14, 0f3F000000;
	cvt.rn.f32.u32 	%f16, %r5;
	div.rn.f32 	%f17, %f15, %f16;
	fma.rn.f32 	%f18, %f13, 0f40000000, 0fBF800000;
	fma.rn.f32 	%f19, %f17, 0f40000000, 0fBF800000;
	ld.const.v2.f32 	{%f20, %f21}, [params+16];
	mov.u32 	%r77, 0;
	mov.u32 	%r43, 1;
	ld.const.v2.f32 	{%f22, %f23}, [params+24];
	ld.const.v2.f32 	{%f25, %f26}, [params+32];
	ld.const.v2.f32 	{%f29, %f30}, [params+40];
	ld.const.v2.f32 	{%f33, %f34}, [params+48];
	mul.f32 	%f37, %f29, %f19;
	mul.f32 	%f38, %f30, %f19;
	mul.f32 	%f39, %f33, %f19;
	fma.rn.f32 	%f40, %f23, %f18, %f37;
	fma.rn.f32 	%f41, %f25, %f18, %f38;
	fma.rn.f32 	%f42, %f26, %f18, %f39;
	ld.const.v2.f32 	{%f43, %f44}, [params+56];
	sub.f32 	%f47, %f40, %f34;
	sub.f32 	%f48, %f41, %f43;
	sub.f32 	%f49, %f42, %f44;
	mul.f32 	%f50, %f48, %f48;
	fma.rn.f32 	%f51, %f47, %f47, %f50;
	fma.rn.f32 	%f52, %f49, %f49, %f51;
	rsqrt.approx.f32 	%f53, %f52;
	mul.f32 	%f4, %f53, %f47;
	mul.f32 	%f5, %f53, %f48;
	mul.f32 	%f6, %f53, %f49;
	mov.f32 	%f9, 0f00000000;
	st.local.u32 	[%rd3], %r77;
	st.local.u32 	[%rd3+4], %r77;
	st.local.u32 	[%rd3+8], %r77;
	cvt.u32.u64 	%r46, %rd2;
	shr.u64 	%rd4, %rd2, 32;
	cvt.u32.u64 	%r47, %rd4;
	ld.const.u64 	%rd1, [params+64];
	mov.f32 	%f8, 0f5A0E1BCA;
	mov.u32 	%r40, 255;
	mov.u32 	%r45, 2;
	// begin inline asm
	call(%r7,%r8,%r9,%r10,%r11,%r12,%r13,%r14,%r15,%r16,%r17,%r18,%r19,%r20,%r21,%r22,%r23,%r24,%r25,%r26,%r27,%r28,%r29,%r30,%r31,%r32,%r33,%r34,%r35,%r36,%r37,%r38),_optix_trace_typed_32,(%r77,%rd1,%f20,%f21,%f22,%f4,%f5,%f6,%f9,%f8,%f9,%r40,%r77,%r77,%r43,%r77,%r45,%r46,%r47,%r77,%r77,%r77,%r77,%r77,%r77,%r77,%r77,%r77,%r77,%r77,%r77,%r77,%r77,%r77,%r77,%r77,%r77,%r77,%r77,%r77,%r77,%r77,%r77,%r77,%r77,%r77,%r77,%r77,%r77);
	// end inline asm
	ld.const.u32 	%r78, [params+8];
	mad.lo.s32 	%r79, %r78, %r2, %r1;
	ld.const.u64 	%rd5, [params];
	cvta.to.global.u64 	%rd6, %rd5;
	ld.local.f32 	%f54, [%rd3];
	ld.local.f32 	%f55, [%rd3+4];
	ld.local.f32 	%f56, [%rd3+8];
	mul.wide.s32 	%rd7, %r79, 12;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f54;
	st.global.f32 	[%rd8+4], %f55;
	st.global.f32 	[%rd8+8], %f56;
	ret;

}
	// .globl	__closesthit__ch
.visible .entry __closesthit__ch()
{
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<4>;


	mov.u32 	%r2, 0;
	// begin inline asm
	call (%r1), _optix_get_payload, (%r2);
	// end inline asm
	mov.u32 	%r4, 1;
	// begin inline asm
	call (%r3), _optix_get_payload, (%r4);
	// end inline asm
	cvt.u64.u32 	%rd1, %r3;
	cvt.u64.u32 	%rd2, %r1;
	bfi.b64 	%rd3, %rd1, %rd2, 32, 32;
	mov.u32 	%r5, 1065353216;
	st.u32 	[%rd3], %r5;
	st.u32 	[%rd3+4], %r2;
	st.u32 	[%rd3+8], %r2;
	ret;

}
	// .globl	__miss__ms
.visible .entry __miss__ms()
{
	.reg .b32 	%r<8>;
	.reg .b64 	%rd<4>;


	mov.u32 	%r2, 0;
	// begin inline asm
	call (%r1), _optix_get_payload, (%r2);
	// end inline asm
	mov.u32 	%r4, 1;
	// begin inline asm
	call (%r3), _optix_get_payload, (%r4);
	// end inline asm
	cvt.u64.u32 	%rd1, %r3;
	cvt.u64.u32 	%rd2, %r1;
	bfi.b64 	%rd3, %rd1, %rd2, 32, 32;
	mov.u32 	%r5, 1060320051;
	st.u32 	[%rd3], %r5;
	mov.u32 	%r6, 1061997773;
	st.u32 	[%rd3+4], %r6;
	mov.u32 	%r7, 1065353216;
	st.u32 	[%rd3+8], %r7;
	ret;

}

